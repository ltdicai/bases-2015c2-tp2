1) Los empleados que atendieron clientes mayores de edad:
db.empleados.find({"clientes_mayores": {$exists: true, $not: {$size: 0}}})

2) Los artículos más vendidos:
max_cant_unidades_vendidas = (db.articulos.aggregate([{$group : {_id: null, max : {$max : "$cant_unidades_vendidas"}}}])).next().max
db.articulos.find("cant_unidades_vendidas" : max_cant_unidades_vendidas)

3) Los sectores donde trabaja exactamente 3 empleados:
db.sectores.find({"empleados.lista": {$size: 3}})

4) El empleado que trabaja en más sectores:
var max = db.empleados.aggregate([{$group: {_id:null, max: {$max: {$size: "$sectores"}}}}]).next().max
db.empleados.find({sectores: {$size: max}})

5) Ranking de los clientes con mayor cantidad de compras
db.clientes.aggregate([{$sort : {"articulos.total" : -1} } ])

6) Cantidad de compras realizadas por clientes de misma edad:
db.clientes.aggregate([{$project: {"art_total": "$articulos.total", "edad": 1}}, {$group: {_id: "$edad", total: { $sum: "$art_total"}}}])

MONGODB:

1) Devolver la cantidad de disposiciones tipo resoluciones que se hayan realizado en Abril del 2013.

var m = function(){ 
		var month = parseInt((this.FechaDisposicion).split('-')[1]); 
		if (month == 4 && this.Tipo == "Resoluciones"){ 
			emit(this.Tipo, 1); 
		}
	}

var r = function(key,values) {
		return Array.sum(values)
	}

db.disposiciones_2013.mapReduce(m,r,{out: "map_reduce_1"})


2) Devolver la cantidad de disposiciones por cada tipo definido:

var m = function(){ emit(this["Tipo"], 1) }
var r = function(key,values) { return Array.sum(values); }
db.disposiciones_2012.mapReduce(m,r,{out: "map_reduce_2"})
db.disposiciones_2013.mapReduce(m,r,{out: {reduce : "map_reduce_2"}])
db.disposiciones_2014.mapReduce(m,r,{out: {reduce : "map_reduce_2"}})
db.map_reduce_2.aggregate( [ {$group : {_id:null, total: {$sum : "$value"}}} ] ) = 41642
db.disposiciones_2012.find().count() + db.disposiciones_2013.find().count() + db.disposiciones_2014.find().count() = 41642

### new Date(fd).toISOString() == new Date(Date.UTC(2013,01,25)).toISOString();
// Llevamos ambas fechas a un mismo formato

3) var m = function(){
                f_boja = this["FechaBOJA"].split('/');
                boja_day = f_boja[0];
                boja_month = f_boja[1] - 1;
                boja_year = f_boja[2];
                f_boja_iso_string = (new Date(Date.UTC(boja_year, boja_month, boja_day))).toISOString();
                emit(f_boja_iso_string,1);

                if (typeof(this["FechaDisposicion"]) === 'string') {
                        f_disposicion = this["FechaDisposicion"];
                        if (f_disposicion.split('-').length == 3) {
                                if (f_disposicion.indexOf('T') >= -1){
                                        if (!isNaN(Date.parse(f_disposicion))){
                                            f_disposicion_iso_string = (new Date(f_disposicion)).toISOString();
                                            emit(f_disposicion_iso_string,1);

                                        }
                                }else{
                                        f_disposicion = this["FechaDisposicion"].split('-');
                                        disposicion_day = f_disposicion[0];
                                        disposicion_month = f_disposicion[1] - 1;
                                        disposicion_year = f_disposicion[2];
                                        f_disposicion_iso_string = (new Date(Date.UTC(disposicion_year, disposicion_month, disposicion_monthosicion_day))).toISOString();
                                }
                        }
                }
           }

var r = function(key, values) { return Array.sum(values) ; }

db.disposiciones_2012.mapReduce(m,r,{out: "map_reduce_3"})
db.disposiciones_2013.mapReduce(m,r,{out: {reduce : "map_reduce_3"}})
db.disposiciones_2014.mapReduce(m,r,{out: {reduce : "map_reduce_3"}})
db.map_reduce_3.aggregate([{$group : {_id: null, max_repeticiones: { $max : "$value"} } }])

4) Devolver la mayor cantidad de páginas utilizadas por cada tipo de disposición:
Estrategia: utilizar el operador $substract
El reduce debe mantener la máxima diferencia sobre tipo de disposición

var m = function(){
	pagina_inicial = this["PaginaInicial"]
	pagina_final = this["PaginaFinal"]
	emit(this["Tipo"], pagina_final - pagina_inicial)
}

var r = function(key, values){
	var max = 0;
	// Calculo del maximo
	for(var i=0; i<values.length; i++){
		if (values[i] > max){
			max = values[i];
		}
	}
	return max;
}

db.disposiciones_2012.mapReduce(m,r,{out: "map_reduce_4"})
db.disposiciones_2013.mapReduce(m,r,{out: {reduce : "map_reduce_4"}})
db.disposiciones_2014.mapReduce(m,r,{out: {reduce : "map_reduce_4"}})
